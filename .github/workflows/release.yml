name: Release and Update Manifests

on:
  workflow_dispatch:
    inputs:
      environments:
        type: choice
        description: 'Environments to deploy to'
        options:
          - dev
          - dev staging
          - dev staging sandbox
          - dev staging sandbox prod
      commit_sha:
        type: string
        description: 'Commit SHA to deploy (must be from main branch, defaults to latest SHA if not specified)'
        required: false
  workflow_run:
    workflows:
      - 'Build and push to ECR'
    branches:
      - main
    types:
      - completed

env:
  auto_deploy_envs: 'dev staging'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  validate-sha:
    runs-on: ubuntu-latest
    if: github.event.inputs.commit_sha != ''
    outputs:
      validated_sha: ${{ steps.validate-sha.outputs.validated_sha }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate SHA exists in main branch
        id: validate-sha
        run: |
          git fetch origin main
          if git merge-base --is-ancestor ${{ github.event.inputs.commit_sha }} origin/main; then
            echo "SHA ${{ github.event.inputs.commit_sha }} exists in main branch"
            echo "validated_sha=${{ github.event.inputs.commit_sha }}" >> $GITHUB_OUTPUT
          else
            echo "Error: SHA ${{ github.event.inputs.commit_sha }} does not exist in main branch"
            exit 1
          fi

  prepare-environments:
    runs-on: ubuntu-latest
    needs: [validate-sha]
    if: >
      github.event.inputs.commit_sha == '' ||
      (github.event.inputs.commit_sha != '' && needs.validate-sha.result == 'success')
    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
    steps:
      - name: Set to auto deploy environments when not run via workflow dispatch
        if: github.event.inputs.environments == ''
        run: |
          echo "triggered via push to main"
          echo "environments=${{ env.auto_deploy_envs }}" >> $GITHUB_ENV
      - name: Set to environments specified in input when run via workflow dispatch
        if: github.event.inputs.environments != ''
        run: |
          echo "triggered via workflow dispatch"
          echo "environments=${{ github.event.inputs.environments }}" >> $GITHUB_ENV
      - name: Set output
        id: set-environments
        run: |
          echo "environments=${{ env.environments }}" >> $GITHUB_OUTPUT

  update_image_tag:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    needs:
      - prepare-environments
      - validate-sha
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GHA_OIDC_ROLE }}
          aws-region: us-gov-west-1

      - name: Get bot token from Parameter Store
        uses: department-of-veterans-affairs/action-inject-ssm-secrets@latest
        with:
          ssm_parameter: /devops/VA_VSP_BOT_GITHUB_TOKEN
          env_variable_name: GITHUB_TOKEN

      - name: Check out vsp-infra-application-manifests
        uses: actions/checkout@v4
        with:
          repository: department-of-veterans-affairs/vsp-infra-application-manifests
          token: ${{ env.GITHUB_TOKEN }}
          fetch-depth: 1
          path: vsp-infra-application-manifests

      - name: Set deployment SHA
        id: set-sha
        run: |
          if [[ "${{ needs.validate-sha.outputs.validated_sha }}" != "" ]]; then
            echo "Using provided SHA: ${{ needs.validate-sha.outputs.validated_sha }}"
            echo "deployment_sha=${{ needs.validate-sha.outputs.validated_sha }}" >> $GITHUB_ENV
          else
            echo "Using latest SHA: ${{ github.sha }}"
            echo "deployment_sha=${{ github.sha }}" >> $GITHUB_ENV
          fi

      - name: Update image tag in infra repo
        run: |
          cd vsp-infra-application-manifests/apps/disability-max-ratings-api
          envs=( ${{ needs.prepare-environments.outputs.environments }} )
          for env in ${envs[*]};
          do
            yq e -i '(.image.tag) |= "'"${{ env.deployment_sha }}"'"' $env/values.yaml
          done
          git diff --unified=0

      - name: Add and Commit file
        uses: EndBug/add-and-commit@v9
        with:
          author_email: 70344339+va-vsp-bot@users.noreply.github.com
          author_name: va-vsp-bot
          cwd: vsp-infra-application-manifests/apps/disability-max-ratings-api
          fetch: false
          message: 'auto-updating disability-max-ratings-api to commit: ${{ env.deployment_sha }} for env(s): ${{ needs.prepare-environments.outputs.environments }}'
